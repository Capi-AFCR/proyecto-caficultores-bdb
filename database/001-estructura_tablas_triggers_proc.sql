
-- Tabla de caficultores
CREATE TABLE caficultores (
  id_caficultor NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR2(100) NOT NULL,
  identificacion VARCHAR2(20) UNIQUE NOT NULL,
  ciudad VARCHAR2(50) NOT NULL,
  fecha_registro DATE DEFAULT SYSDATE
);

-- Tabla de productos
CREATE TABLE productos (
  id_producto NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_caficultor NUMBER NOT NULL,
  tipo_producto VARCHAR2(50) NOT NULL CHECK (tipo_producto IN ('CAA', 'TAD', 'SGP', 'MVI')), --CAA: Cuenta Ahorros, TAD: Tarjeta DÃ©bito, SGP: Gestion Productiva, MVI: Monedero Virtual
  numero_producto VARCHAR2(200),
  saldo NUMBER(15,2) DEFAULT 0,
  FOREIGN KEY (id_caficultor) REFERENCES caficultores(id_caficultor)
);

-- Tabla de abonos
CREATE TABLE abonos (
  id_abono NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_producto NUMBER NOT NULL,
  monto NUMBER(15,2) NOT NULL CHECK (monto > 0),
  fecha_abono DATE DEFAULT SYSDATE,
  descripcion VARCHAR2(200),
  FOREIGN KEY (id_producto) REFERENCES productos(id_producto)
);

-- Trigger para actualizar saldo del monedero al registrar abono
CREATE OR REPLACE TRIGGER trg_actualizar_saldo
AFTER INSERT ON abonos
FOR EACH ROW
BEGIN
  UPDATE productos
  SET saldo = saldo + :NEW.monto
  WHERE id_producto = :NEW.id_producto;
END;
/

-- Procedimiento almacenado para registrar abonos
CREATE OR REPLACE PROCEDURE registrar_abono (
  p_id_producto IN NUMBER,
  p_monto IN NUMBER,
  p_descripcion IN VARCHAR2,
  p_id_abono OUT NUMBER
) AS
BEGIN
  IF p_monto <= 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'El monto debe ser mayor a cero');
  END IF;
  
  INSERT INTO abonos (id_producto, monto, fecha_abono, descripcion)
  VALUES (p_id_producto, p_monto, SYSDATE, p_descripcion)
  RETURNING id_abono INTO p_id_abono;
  
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE;
END;
/

-- Procedimiento almacenado para consultar saldo del monedero
CREATE OR REPLACE PROCEDURE consultar_saldo (
  p_id_caficultor IN NUMBER,
  p_saldo OUT NUMBER
) AS
BEGIN
  SELECT saldo INTO p_saldo
  FROM productos
  WHERE id_caficultor = p_id_caficultor
  AND tipo_producto = 'MVI';
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    p_saldo := 0;
  WHEN OTHERS THEN
    RAISE;
END;
/

-- Procedimiento almacenado para consultar productos bancarios
CREATE OR REPLACE PROCEDURE consultar_productos (
  p_id_caficultor IN NUMBER,
  p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
    SELECT tipo_producto, numero_producto, saldo
    FROM productos
    WHERE id_caficultor = p_id_caficultor;
END;
/